diff --git a/suckless/suckless/dwm/Makefile b/suckless/suckless/dwm/Makefile
index d20c609..b716b42 100644
--- a/suckless/suckless/dwm/Makefile
+++ b/suckless/suckless/dwm/Makefile
@@ -25,7 +25,7 @@ FREETYPEINC = /usr/include/freetype2
 
 # includes and libs
 INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrender -lImlib2
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/suckless/suckless/dwm/config.h b/suckless/suckless/dwm/config.h
index ed3141f..f66cc3c 100644
--- a/suckless/suckless/dwm/config.h
+++ b/suckless/suckless/dwm/config.h
@@ -4,6 +4,8 @@
 
 /* appearance */
 
+#define ICONSIZE 16                                   /* icon size */
+#define ICONSPACING 5                                 /* space between icon and title */
 static const unsigned int borderpx         =   0;     /* border pixel of windows */
 static const unsigned int gappx            =   0;     /* gaps between windows */
 static const unsigned int snap             =   32;    /* snap pixel */
diff --git a/suckless/suckless/dwm/drw.c b/suckless/suckless/dwm/drw.c
index c1c265c..2208133 100644
--- a/suckless/suckless/dwm/drw.c
+++ b/suckless/suckless/dwm/drw.c
@@ -4,6 +4,7 @@
 #include <string.h>
 #include <X11/Xlib.h>
 #include <X11/Xft/Xft.h>
+#include <Imlib2.h>
 
 #include "drw.h"
 #include "util.h"
@@ -71,6 +72,7 @@ drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h
 	drw->w = w;
 	drw->h = h;
 	drw->drawable = XCreatePixmap(dpy, root, w, h, DefaultDepth(dpy, screen));
+	drw->picture = XRenderCreatePicture(dpy, drw->drawable, XRenderFindVisualFormat(dpy, DefaultVisual(dpy, screen)), 0, NULL);
 	drw->gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, drw->gc, 1, LineSolid, CapButt, JoinMiter);
 
@@ -85,14 +87,18 @@ drw_resize(Drw *drw, unsigned int w, unsigned int h)
 
 	drw->w = w;
 	drw->h = h;
+	if (drw->picture)
+		XRenderFreePicture(drw->dpy, drw->picture);
 	if (drw->drawable)
 		XFreePixmap(drw->dpy, drw->drawable);
 	drw->drawable = XCreatePixmap(drw->dpy, drw->root, w, h, DefaultDepth(drw->dpy, drw->screen));
+	drw->picture = XRenderCreatePicture(drw->dpy, drw->drawable, XRenderFindVisualFormat(drw->dpy, DefaultVisual(drw->dpy, drw->screen)), 0, NULL);
 }
 
 void
 drw_free(Drw *drw)
 {
+	XRenderFreePicture(drw->dpy, drw->picture);
 	XFreePixmap(drw->dpy, drw->drawable);
 	XFreeGC(drw->dpy, drw->gc);
 	drw_fontset_free(drw->fonts);
@@ -223,6 +229,67 @@ drw_setscheme(Drw *drw, Clr *scm)
 		drw->scheme = scm;
 }
 
+Picture
+drw_picture_create_resized(Drw *drw, char *src, unsigned int srcw, unsigned int srch, unsigned int dstw, unsigned int dsth) {
+	Pixmap pm;
+	Picture pic;
+	GC gc;
+
+	if (srcw <= (dstw << 1u) && srch <= (dsth << 1u)) {
+		XImage img = {
+			srcw, srch, 0, ZPixmap, src,
+			ImageByteOrder(drw->dpy), BitmapUnit(drw->dpy), BitmapBitOrder(drw->dpy), 32,
+			32, 0, 32,
+			0, 0, 0
+		};
+		XInitImage(&img);
+
+		pm = XCreatePixmap(drw->dpy, drw->root, srcw, srch, 32);
+		gc = XCreateGC(drw->dpy, pm, 0, NULL);
+		XPutImage(drw->dpy, pm, gc, &img, 0, 0, 0, 0, srcw, srch);
+		XFreeGC(drw->dpy, gc);
+
+		pic = XRenderCreatePicture(drw->dpy, pm, XRenderFindStandardFormat(drw->dpy, PictStandardARGB32), 0, NULL);
+		XFreePixmap(drw->dpy, pm);
+
+		XRenderSetPictureFilter(drw->dpy, pic, FilterBilinear, NULL, 0);
+		XTransform xf;
+		xf.matrix[0][0] = (srcw << 16u) / dstw; xf.matrix[0][1] = 0; xf.matrix[0][2] = 0;
+		xf.matrix[1][0] = 0; xf.matrix[1][1] = (srch << 16u) / dsth; xf.matrix[1][2] = 0;
+		xf.matrix[2][0] = 0; xf.matrix[2][1] = 0; xf.matrix[2][2] = 65536;
+		XRenderSetPictureTransform(drw->dpy, pic, &xf);
+	} else {
+		Imlib_Image origin = imlib_create_image_using_data(srcw, srch, (DATA32 *)src);
+		if (!origin) return None;
+		imlib_context_set_image(origin);
+		imlib_image_set_has_alpha(1);
+		Imlib_Image scaled = imlib_create_cropped_scaled_image(0, 0, srcw, srch, dstw, dsth);
+		imlib_free_image_and_decache();
+		if (!scaled) return None;
+		imlib_context_set_image(scaled);
+		imlib_image_set_has_alpha(1);
+
+		XImage img = {
+		    dstw, dsth, 0, ZPixmap, (char *)imlib_image_get_data_for_reading_only(),
+		    ImageByteOrder(drw->dpy), BitmapUnit(drw->dpy), BitmapBitOrder(drw->dpy), 32,
+		    32, 0, 32,
+		    0, 0, 0
+		};
+		XInitImage(&img);
+
+		pm = XCreatePixmap(drw->dpy, drw->root, dstw, dsth, 32);
+		gc = XCreateGC(drw->dpy, pm, 0, NULL);
+		XPutImage(drw->dpy, pm, gc, &img, 0, 0, 0, 0, dstw, dsth);
+		imlib_free_image_and_decache();
+		XFreeGC(drw->dpy, gc);
+
+		pic = XRenderCreatePicture(drw->dpy, pm, XRenderFindStandardFormat(drw->dpy, PictStandardARGB32), 0, NULL);
+		XFreePixmap(drw->dpy, pm);
+	}
+
+	return pic;
+}
+
 void
 drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)
 {
@@ -366,6 +433,14 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 	return x + (render ? w : 0);
 }
 
+void
+drw_pic(Drw *drw, int x, int y, unsigned int w, unsigned int h, Picture pic)
+{
+	if (!drw)
+		return;
+	XRenderComposite(drw->dpy, PictOpOver, pic, None, drw->picture, 0, 0, 0, 0, x, y, w, h);
+}
+
 void
 drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)
 {
diff --git a/suckless/suckless/dwm/drw.h b/suckless/suckless/dwm/drw.h
index 4bcd5ad..71aefa2 100644
--- a/suckless/suckless/dwm/drw.h
+++ b/suckless/suckless/dwm/drw.h
@@ -21,6 +21,7 @@ typedef struct {
 	int screen;
 	Window root;
 	Drawable drawable;
+	Picture picture;
 	GC gc;
 	Clr *scheme;
 	Fnt *fonts;
@@ -49,9 +50,12 @@ void drw_cur_free(Drw *drw, Cur *cursor);
 void drw_setfontset(Drw *drw, Fnt *set);
 void drw_setscheme(Drw *drw, Clr *scm);
 
+Picture drw_picture_create_resized(Drw *drw, char *src, unsigned int src_w, unsigned int src_h, unsigned int dst_w, unsigned int dst_h);
+
 /* Drawing functions */
 void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert);
 int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert);
+void drw_pic(Drw *drw, int x, int y, unsigned int w, unsigned int h, Picture pic);
 
 /* Map functions */
 void drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h);
diff --git a/suckless/suckless/dwm/dwm.c b/suckless/suckless/dwm/dwm.c
index f678f06..91cd4dc 100644
--- a/suckless/suckless/dwm/dwm.c
+++ b/suckless/suckless/dwm/dwm.c
@@ -28,6 +28,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <limits.h>
+#include <stdint.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
@@ -77,7 +79,7 @@
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
 enum { SchemeNorm, SchemeSel, SchemeHid }; /* color schemes */
-enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
+enum { NetSupported, NetWMName, NetWMState, NetWMCheck, NetWMIcon,
        NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -114,6 +116,7 @@ struct Client {
 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
 	int floatborderpx;
 	char scratchkey;
+	unsigned int icw, ich; Picture icon;
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -206,8 +209,10 @@ static void focusmon(const Arg *arg);
 static void focusstackvis(const Arg *arg);
 static void focusstackhid(const Arg *arg);
 static void focusstack(int inc, int vis);
+static Picture geticonprop(Window w, unsigned int *icw, unsigned int *ich);
 static Atom getatomprop(Client *c, Atom prop);
 static int getrootptr(int *x, int *y);
+static void freeicon(Client *c);
 static long getstate(Window w);
 static unsigned int getsystraywidth();
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
@@ -279,6 +284,7 @@ static void updatesystray(void);
 static void updatesystrayicongeom(Client *i, int w, int h);
 static void updatesystrayiconstate(Client *i, XPropertyEvent *ev);
 static void updatetitle(Client *c);
+static void updateicon(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
@@ -1008,7 +1014,8 @@ drawbar(Monitor *m)
 					}
 					remainder--;
 				}
-    			drw_text(drw, x, 0, tabw, bh, lrpad / 2, c->name, 0);
+				drw_text(drw, x, 0, tabw, bh, lrpad / 2 + (c->icon ? c->icw + ICONSPACING : 0),  c->name, 0);
+				if (c->icon) drw_pic(drw, x + lrpad / 2, (bh - c->ich) / 2, c->icw, c->ich, c->icon);
 				x += tabw;
 			}
 		} else {
@@ -1198,6 +1205,67 @@ getatomprop(Client *c, Atom prop)
 	return atom;
 }
 
+static uint32_t prealpha(uint32_t p) {
+	uint8_t a = p >> 24u;
+	uint32_t rb = (a * (p & 0xFF00FFu)) >> 8u;
+	uint32_t g = (a * (p & 0x00FF00u)) >> 8u;
+	return (rb & 0xFF00FFu) | (g & 0x00FF00u) | (a << 24u);
+}
+
+Picture
+geticonprop(Window win, unsigned int *picw, unsigned int *pich)
+{
+	int format;
+	unsigned long n, extra, *p = NULL;
+	Atom real;
+
+	if (XGetWindowProperty(dpy, win, netatom[NetWMIcon], 0L, LONG_MAX, False, AnyPropertyType,
+						   &real, &format, &n, &extra, (unsigned char **)&p) != Success)
+		return None;
+	if (n == 0 || format != 32) { XFree(p); return None; }
+
+	unsigned long *bstp = NULL;
+	uint32_t w, h, sz;
+	{
+		unsigned long *i; const unsigned long *end = p + n;
+		uint32_t bstd = UINT32_MAX, d, m;
+		for (i = p; i < end - 1; i += sz) {
+			if ((w = *i++) > UINT16_MAX || (h = *i++) > UINT16_MAX) { XFree(p); return None; }
+			if ((sz = w * h) > end - i) break;
+			if ((m = w > h ? w : h) >= ICONSIZE && (d = m - ICONSIZE) < bstd) { bstd = d; bstp = i; }
+		}
+		if (!bstp) {
+			for (i = p; i < end - 1; i += sz) {
+				if ((w = *i++) > UINT16_MAX || (h = *i++) > UINT16_MAX) { XFree(p); return None; }
+				if ((sz = w * h) > end - i) break;
+				if ((d = ICONSIZE - (w > h ? w : h)) < bstd) { bstd = d; bstp = i; }
+			}
+		}
+		if (!bstp) { XFree(p); return None; }
+	}
+
+	if ((w = *(bstp - 2)) == 0 || (h = *(bstp - 1)) == 0) { XFree(p); return None; }
+
+	uint32_t icw, ich;
+	if (w <= h) {
+		ich = ICONSIZE; icw = w * ICONSIZE / h;
+		if (icw == 0) icw = 1;
+	}
+	else {
+		icw = ICONSIZE; ich = h * ICONSIZE / w;
+		if (ich == 0) ich = 1;
+	}
+	*picw = icw; *pich = ich;
+
+	uint32_t i, *bstp32 = (uint32_t *)bstp;
+	for (sz = w * h, i = 0; i < sz; ++i) bstp32[i] = prealpha(bstp[i]);
+
+	Picture ret = drw_picture_create_resized(drw, (char *)bstp, w, h, icw, ich);
+	XFree(p);
+
+	return ret;
+}
+
 int
 getrootptr(int *x, int *y)
 {
@@ -1397,6 +1465,7 @@ manage(Window w, XWindowAttributes *wa)
 	c->h = c->oldh = wa->height;
 	c->oldbw = wa->border_width;
 
+	updateicon(c);
 	updatetitle(c);
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
@@ -1625,6 +1694,11 @@ propertynotify(XEvent *e)
 			if (c == c->mon->sel)
 				drawbar(c->mon);
 		}
+		else if (ev->atom == netatom[NetWMIcon]) {
+			updateicon(c);
+			if (c == c->mon->sel)
+				drawbar(c->mon);
+		}
 		if (ev->atom == netatom[NetWMWindowType])
 			updatewindowtype(c);
 	}
@@ -2016,6 +2090,7 @@ setup(void)
 	netatom[NetSystemTrayOrientation] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION", False);
 	netatom[NetSystemTrayOrientationHorz] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION_HORZ", False);
 	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
+	netatom[NetWMIcon] = XInternAtom(dpy, "_NET_WM_ICON", False);
 	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
 	netatom[NetWMCheck] = XInternAtom(dpy, "_NET_SUPPORTING_WM_CHECK", False);
 	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
@@ -2308,6 +2383,15 @@ togglewin(const Arg *arg)
 	}
 }
 
+void
+freeicon(Client *c)
+{
+	if (c->icon) {
+		XRenderFreePicture(dpy, c->icon);
+		c->icon = None;
+	}
+}
+
 void
 unfocus(Client *c, int setfocus)
 {
@@ -2329,6 +2413,7 @@ unmanage(Client *c, int destroyed)
 
 	detach(c);
 	detachstack(c);
+	freeicon(c);
 	if (!destroyed) {
 		wc.border_width = c->oldbw;
 		XGrabServer(dpy); /* avoid race conditions */
@@ -2693,6 +2778,13 @@ updatetitle(Client *c)
 		strcpy(c->name, broken);
 }
 
+void
+updateicon(Client *c)
+{
+	freeicon(c);
+	c->icon = geticonprop(c->win, &c->icw, &c->ich);
+}
+
 void
 updatewindowtype(Client *c)
 {
diff --git a/suckless/suckless/dwm/winicon.patch b/suckless/suckless/dwm/winicon.patch
deleted file mode 100644
index 1d1036b..0000000
--- a/suckless/suckless/dwm/winicon.patch
+++ /dev/null
@@ -1,366 +0,0 @@
-diff --git a/suckless/suckless/dwm/Makefile b/suckless/suckless/dwm/Makefile
-index b716b42..d20c609 100644
---- a/suckless/suckless/dwm/Makefile
-+++ b/suckless/suckless/dwm/Makefile
-@@ -25,7 +25,7 @@ FREETYPEINC = /usr/include/freetype2
- 
- # includes and libs
- INCS = -I${X11INC} -I${FREETYPEINC}
--LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrender -lImlib2
-+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
- 
- # flags
- CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
-diff --git a/suckless/suckless/dwm/config.h b/suckless/suckless/dwm/config.h
-index f66cc3c..ed3141f 100644
---- a/suckless/suckless/dwm/config.h
-+++ b/suckless/suckless/dwm/config.h
-@@ -4,8 +4,6 @@
- 
- /* appearance */
- 
--#define ICONSIZE 16                                   /* icon size */
--#define ICONSPACING 5                                 /* space between icon and title */
- static const unsigned int borderpx         =   0;     /* border pixel of windows */
- static const unsigned int gappx            =   0;     /* gaps between windows */
- static const unsigned int snap             =   32;    /* snap pixel */
-diff --git a/suckless/suckless/dwm/drw.c b/suckless/suckless/dwm/drw.c
-index 2208133..c1c265c 100644
---- a/suckless/suckless/dwm/drw.c
-+++ b/suckless/suckless/dwm/drw.c
-@@ -4,7 +4,6 @@
- #include <string.h>
- #include <X11/Xlib.h>
- #include <X11/Xft/Xft.h>
--#include <Imlib2.h>
- 
- #include "drw.h"
- #include "util.h"
-@@ -72,7 +71,6 @@ drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h
- 	drw->w = w;
- 	drw->h = h;
- 	drw->drawable = XCreatePixmap(dpy, root, w, h, DefaultDepth(dpy, screen));
--	drw->picture = XRenderCreatePicture(dpy, drw->drawable, XRenderFindVisualFormat(dpy, DefaultVisual(dpy, screen)), 0, NULL);
- 	drw->gc = XCreateGC(dpy, root, 0, NULL);
- 	XSetLineAttributes(dpy, drw->gc, 1, LineSolid, CapButt, JoinMiter);
- 
-@@ -87,18 +85,14 @@ drw_resize(Drw *drw, unsigned int w, unsigned int h)
- 
- 	drw->w = w;
- 	drw->h = h;
--	if (drw->picture)
--		XRenderFreePicture(drw->dpy, drw->picture);
- 	if (drw->drawable)
- 		XFreePixmap(drw->dpy, drw->drawable);
- 	drw->drawable = XCreatePixmap(drw->dpy, drw->root, w, h, DefaultDepth(drw->dpy, drw->screen));
--	drw->picture = XRenderCreatePicture(drw->dpy, drw->drawable, XRenderFindVisualFormat(drw->dpy, DefaultVisual(drw->dpy, drw->screen)), 0, NULL);
- }
- 
- void
- drw_free(Drw *drw)
- {
--	XRenderFreePicture(drw->dpy, drw->picture);
- 	XFreePixmap(drw->dpy, drw->drawable);
- 	XFreeGC(drw->dpy, drw->gc);
- 	drw_fontset_free(drw->fonts);
-@@ -229,67 +223,6 @@ drw_setscheme(Drw *drw, Clr *scm)
- 		drw->scheme = scm;
- }
- 
--Picture
--drw_picture_create_resized(Drw *drw, char *src, unsigned int srcw, unsigned int srch, unsigned int dstw, unsigned int dsth) {
--	Pixmap pm;
--	Picture pic;
--	GC gc;
--
--	if (srcw <= (dstw << 1u) && srch <= (dsth << 1u)) {
--		XImage img = {
--			srcw, srch, 0, ZPixmap, src,
--			ImageByteOrder(drw->dpy), BitmapUnit(drw->dpy), BitmapBitOrder(drw->dpy), 32,
--			32, 0, 32,
--			0, 0, 0
--		};
--		XInitImage(&img);
--
--		pm = XCreatePixmap(drw->dpy, drw->root, srcw, srch, 32);
--		gc = XCreateGC(drw->dpy, pm, 0, NULL);
--		XPutImage(drw->dpy, pm, gc, &img, 0, 0, 0, 0, srcw, srch);
--		XFreeGC(drw->dpy, gc);
--
--		pic = XRenderCreatePicture(drw->dpy, pm, XRenderFindStandardFormat(drw->dpy, PictStandardARGB32), 0, NULL);
--		XFreePixmap(drw->dpy, pm);
--
--		XRenderSetPictureFilter(drw->dpy, pic, FilterBilinear, NULL, 0);
--		XTransform xf;
--		xf.matrix[0][0] = (srcw << 16u) / dstw; xf.matrix[0][1] = 0; xf.matrix[0][2] = 0;
--		xf.matrix[1][0] = 0; xf.matrix[1][1] = (srch << 16u) / dsth; xf.matrix[1][2] = 0;
--		xf.matrix[2][0] = 0; xf.matrix[2][1] = 0; xf.matrix[2][2] = 65536;
--		XRenderSetPictureTransform(drw->dpy, pic, &xf);
--	} else {
--		Imlib_Image origin = imlib_create_image_using_data(srcw, srch, (DATA32 *)src);
--		if (!origin) return None;
--		imlib_context_set_image(origin);
--		imlib_image_set_has_alpha(1);
--		Imlib_Image scaled = imlib_create_cropped_scaled_image(0, 0, srcw, srch, dstw, dsth);
--		imlib_free_image_and_decache();
--		if (!scaled) return None;
--		imlib_context_set_image(scaled);
--		imlib_image_set_has_alpha(1);
--
--		XImage img = {
--		    dstw, dsth, 0, ZPixmap, (char *)imlib_image_get_data_for_reading_only(),
--		    ImageByteOrder(drw->dpy), BitmapUnit(drw->dpy), BitmapBitOrder(drw->dpy), 32,
--		    32, 0, 32,
--		    0, 0, 0
--		};
--		XInitImage(&img);
--
--		pm = XCreatePixmap(drw->dpy, drw->root, dstw, dsth, 32);
--		gc = XCreateGC(drw->dpy, pm, 0, NULL);
--		XPutImage(drw->dpy, pm, gc, &img, 0, 0, 0, 0, dstw, dsth);
--		imlib_free_image_and_decache();
--		XFreeGC(drw->dpy, gc);
--
--		pic = XRenderCreatePicture(drw->dpy, pm, XRenderFindStandardFormat(drw->dpy, PictStandardARGB32), 0, NULL);
--		XFreePixmap(drw->dpy, pm);
--	}
--
--	return pic;
--}
--
- void
- drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)
- {
-@@ -433,14 +366,6 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
- 	return x + (render ? w : 0);
- }
- 
--void
--drw_pic(Drw *drw, int x, int y, unsigned int w, unsigned int h, Picture pic)
--{
--	if (!drw)
--		return;
--	XRenderComposite(drw->dpy, PictOpOver, pic, None, drw->picture, 0, 0, 0, 0, x, y, w, h);
--}
--
- void
- drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)
- {
-diff --git a/suckless/suckless/dwm/drw.h b/suckless/suckless/dwm/drw.h
-index 71aefa2..4bcd5ad 100644
---- a/suckless/suckless/dwm/drw.h
-+++ b/suckless/suckless/dwm/drw.h
-@@ -21,7 +21,6 @@ typedef struct {
- 	int screen;
- 	Window root;
- 	Drawable drawable;
--	Picture picture;
- 	GC gc;
- 	Clr *scheme;
- 	Fnt *fonts;
-@@ -50,12 +49,9 @@ void drw_cur_free(Drw *drw, Cur *cursor);
- void drw_setfontset(Drw *drw, Fnt *set);
- void drw_setscheme(Drw *drw, Clr *scm);
- 
--Picture drw_picture_create_resized(Drw *drw, char *src, unsigned int src_w, unsigned int src_h, unsigned int dst_w, unsigned int dst_h);
--
- /* Drawing functions */
- void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert);
- int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert);
--void drw_pic(Drw *drw, int x, int y, unsigned int w, unsigned int h, Picture pic);
- 
- /* Map functions */
- void drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h);
-diff --git a/suckless/suckless/dwm/dwm.c b/suckless/suckless/dwm/dwm.c
-index 91cd4dc..f678f06 100644
---- a/suckless/suckless/dwm/dwm.c
-+++ b/suckless/suckless/dwm/dwm.c
-@@ -28,8 +28,6 @@
- #include <stdlib.h>
- #include <string.h>
- #include <unistd.h>
--#include <limits.h>
--#include <stdint.h>
- #include <sys/types.h>
- #include <sys/wait.h>
- #include <X11/cursorfont.h>
-@@ -79,7 +77,7 @@
- /* enums */
- enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
- enum { SchemeNorm, SchemeSel, SchemeHid }; /* color schemes */
--enum { NetSupported, NetWMName, NetWMState, NetWMCheck, NetWMIcon,
-+enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
-        NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,
-        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
-        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
-@@ -116,7 +114,6 @@ struct Client {
- 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
- 	int floatborderpx;
- 	char scratchkey;
--	unsigned int icw, ich; Picture icon;
- 	Client *next;
- 	Client *snext;
- 	Monitor *mon;
-@@ -209,10 +206,8 @@ static void focusmon(const Arg *arg);
- static void focusstackvis(const Arg *arg);
- static void focusstackhid(const Arg *arg);
- static void focusstack(int inc, int vis);
--static Picture geticonprop(Window w, unsigned int *icw, unsigned int *ich);
- static Atom getatomprop(Client *c, Atom prop);
- static int getrootptr(int *x, int *y);
--static void freeicon(Client *c);
- static long getstate(Window w);
- static unsigned int getsystraywidth();
- static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
-@@ -284,7 +279,6 @@ static void updatesystray(void);
- static void updatesystrayicongeom(Client *i, int w, int h);
- static void updatesystrayiconstate(Client *i, XPropertyEvent *ev);
- static void updatetitle(Client *c);
--static void updateicon(Client *c);
- static void updatewindowtype(Client *c);
- static void updatewmhints(Client *c);
- static void view(const Arg *arg);
-@@ -1014,8 +1008,7 @@ drawbar(Monitor *m)
- 					}
- 					remainder--;
- 				}
--				drw_text(drw, x, 0, tabw, bh, lrpad / 2 + (c->icon ? c->icw + ICONSPACING : 0),  c->name, 0);
--				if (c->icon) drw_pic(drw, x + lrpad / 2, (bh - c->ich) / 2, c->icw, c->ich, c->icon);
-+    			drw_text(drw, x, 0, tabw, bh, lrpad / 2, c->name, 0);
- 				x += tabw;
- 			}
- 		} else {
-@@ -1205,67 +1198,6 @@ getatomprop(Client *c, Atom prop)
- 	return atom;
- }
- 
--static uint32_t prealpha(uint32_t p) {
--	uint8_t a = p >> 24u;
--	uint32_t rb = (a * (p & 0xFF00FFu)) >> 8u;
--	uint32_t g = (a * (p & 0x00FF00u)) >> 8u;
--	return (rb & 0xFF00FFu) | (g & 0x00FF00u) | (a << 24u);
--}
--
--Picture
--geticonprop(Window win, unsigned int *picw, unsigned int *pich)
--{
--	int format;
--	unsigned long n, extra, *p = NULL;
--	Atom real;
--
--	if (XGetWindowProperty(dpy, win, netatom[NetWMIcon], 0L, LONG_MAX, False, AnyPropertyType,
--						   &real, &format, &n, &extra, (unsigned char **)&p) != Success)
--		return None;
--	if (n == 0 || format != 32) { XFree(p); return None; }
--
--	unsigned long *bstp = NULL;
--	uint32_t w, h, sz;
--	{
--		unsigned long *i; const unsigned long *end = p + n;
--		uint32_t bstd = UINT32_MAX, d, m;
--		for (i = p; i < end - 1; i += sz) {
--			if ((w = *i++) > UINT16_MAX || (h = *i++) > UINT16_MAX) { XFree(p); return None; }
--			if ((sz = w * h) > end - i) break;
--			if ((m = w > h ? w : h) >= ICONSIZE && (d = m - ICONSIZE) < bstd) { bstd = d; bstp = i; }
--		}
--		if (!bstp) {
--			for (i = p; i < end - 1; i += sz) {
--				if ((w = *i++) > UINT16_MAX || (h = *i++) > UINT16_MAX) { XFree(p); return None; }
--				if ((sz = w * h) > end - i) break;
--				if ((d = ICONSIZE - (w > h ? w : h)) < bstd) { bstd = d; bstp = i; }
--			}
--		}
--		if (!bstp) { XFree(p); return None; }
--	}
--
--	if ((w = *(bstp - 2)) == 0 || (h = *(bstp - 1)) == 0) { XFree(p); return None; }
--
--	uint32_t icw, ich;
--	if (w <= h) {
--		ich = ICONSIZE; icw = w * ICONSIZE / h;
--		if (icw == 0) icw = 1;
--	}
--	else {
--		icw = ICONSIZE; ich = h * ICONSIZE / w;
--		if (ich == 0) ich = 1;
--	}
--	*picw = icw; *pich = ich;
--
--	uint32_t i, *bstp32 = (uint32_t *)bstp;
--	for (sz = w * h, i = 0; i < sz; ++i) bstp32[i] = prealpha(bstp[i]);
--
--	Picture ret = drw_picture_create_resized(drw, (char *)bstp, w, h, icw, ich);
--	XFree(p);
--
--	return ret;
--}
--
- int
- getrootptr(int *x, int *y)
- {
-@@ -1465,7 +1397,6 @@ manage(Window w, XWindowAttributes *wa)
- 	c->h = c->oldh = wa->height;
- 	c->oldbw = wa->border_width;
- 
--	updateicon(c);
- 	updatetitle(c);
- 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
- 		c->mon = t->mon;
-@@ -1694,11 +1625,6 @@ propertynotify(XEvent *e)
- 			if (c == c->mon->sel)
- 				drawbar(c->mon);
- 		}
--		else if (ev->atom == netatom[NetWMIcon]) {
--			updateicon(c);
--			if (c == c->mon->sel)
--				drawbar(c->mon);
--		}
- 		if (ev->atom == netatom[NetWMWindowType])
- 			updatewindowtype(c);
- 	}
-@@ -2090,7 +2016,6 @@ setup(void)
- 	netatom[NetSystemTrayOrientation] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION", False);
- 	netatom[NetSystemTrayOrientationHorz] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION_HORZ", False);
- 	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
--	netatom[NetWMIcon] = XInternAtom(dpy, "_NET_WM_ICON", False);
- 	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
- 	netatom[NetWMCheck] = XInternAtom(dpy, "_NET_SUPPORTING_WM_CHECK", False);
- 	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
-@@ -2383,15 +2308,6 @@ togglewin(const Arg *arg)
- 	}
- }
- 
--void
--freeicon(Client *c)
--{
--	if (c->icon) {
--		XRenderFreePicture(dpy, c->icon);
--		c->icon = None;
--	}
--}
--
- void
- unfocus(Client *c, int setfocus)
- {
-@@ -2413,7 +2329,6 @@ unmanage(Client *c, int destroyed)
- 
- 	detach(c);
- 	detachstack(c);
--	freeicon(c);
- 	if (!destroyed) {
- 		wc.border_width = c->oldbw;
- 		XGrabServer(dpy); /* avoid race conditions */
-@@ -2778,13 +2693,6 @@ updatetitle(Client *c)
- 		strcpy(c->name, broken);
- }
- 
--void
--updateicon(Client *c)
--{
--	freeicon(c);
--	c->icon = geticonprop(c->win, &c->icw, &c->ich);
--}
--
- void
- updatewindowtype(Client *c)
- {
